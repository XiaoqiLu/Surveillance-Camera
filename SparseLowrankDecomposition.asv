function SparseLowrankDecomposition(D, lambda, tol)

if nargin < 3
    tol = 1e-3;
end

if nargin < 2
    m = size(D, 1);
    lambda = 1 / sqrt(m);
end

%% initialization
A = D;
E = D * 0;
Y = D * 0; % Lagrange multiplier
mu = 1 / norm(D, 'fro'); % increasing constant
rho = 1.25; % increasing ratio
err = tol + 1;

while err > tol
    mu = mu * rho;
    [U, S, V] = svd(D + Y / mu - E);
    A = U * wthresh(S,'s',1 / mu) * V';
    E = wthresh(D + Y / mu - A,'s',lambda / mu);
    Y = Y + mu * (D - A - E);
    err = 
end


end